data "aws_caller_identity" "current" {}

data "aws_iam_policy_document" "guardduty_malware_protection" {
  statement {
    sid       = "AllowManagedRuleToSendS3EventsToGuardDuty"
    effect    = "Allow"
    resources = ["arn:aws:events:${var.region}:${data.aws_caller_identity.current.account_id}:rule/DO-NOT-DELETE-AmazonGuardDutyMalwareProtectionS3*"]
    actions = [
      "events:PutRule",
      "events:DeleteRule",
      "events:PutTargets",
      "events:RemoveTargets",
    ]
    condition {
      test     = "StringLike"
      variable = "events:ManagedBy"
      values   = ["malware-protection-plan.guardduty.amazonaws.com"]
    }
  }

  statement {
    sid       = "AllowGuardDutyToMonitorEventBridgeManagedRule"
    effect    = "Allow"
    resources = ["arn:aws:events:${var.region}:${data.aws_caller_identity.current.account_id}:rule/DO-NOT-DELETE-AmazonGuardDutyMalwareProtectionS3*"]
    actions = [
      "events:DescribeRule",
      "events:ListTargetsByRule",
    ]
  }
  statement {
    sid    = "AllowPostScanTag"
    effect = "Allow"
    actions = [
      "s3:PutObjectTagging",
      "s3:GetObjectTagging",
      "s3:PutObjectVersionTagging",
      "s3:GetObjectVersionTagging",
    ]
    resources = ["arn:aws:s3:::${var.bucket}/*"]
  }
  statement {
    sid    = "AllowEnableS3EventBridgeEvents"
    effect = "Allow"
    actions = [
      "s3:PutBucketNotification",
      "s3:GetBucketNotification",
    ]
    resources = ["arn:aws:s3:::${var.bucket}"]
  }
  statement {
    sid    = "AllowPutValidationObject"
    effect = "Allow"
    actions = [
      "s3:PutObject",
    ]
    resources = ["arn:aws:s3:::${var.bucket}/malware-protection-resource-validation-object"]
  }
  statement {
    sid    = "AllowCheckBucketOwership"
    effect = "Allow"
    actions = [
      "s3:ListBucket",
    ]
    resources = ["arn:aws:s3:::${var.bucket}"]
  }
  statement {
    sid    = "AllowMalwareScan"
    effect = "Allow"
    actions = [
      "s3:GetObject",
      "s3:GetObjectVersion",
    ]
    resources = ["arn:aws:s3:::${var.bucket}/*"]
  }
  statement {
    sid       = "AllowDecryptForMalwareScan"
    effect    = "Allow"
    resources = ["arn:aws:kms:${var.region}:${data.aws_caller_identity.current.account_id}:key/${var.key}"]
    actions = [
      "kms:GenerateDataKey",
      "kms:Decrypt",
    ]
    condition {
      test     = "StringLike"
      variable = "kms:ViaService"
      values   = ["s3.${var.region}.amazonaws.com"]
    }
  }
}

resource "aws_iam_policy" "guardduty_malware_protection" {
  name     = "guardduty-malware-protection-${var.name}"
  policy   = data.aws_iam_policy_document.guardduty_malware_protection.json
}

resource "aws_iam_role" "guardduty_malware_protection" {
  name     = "guardduty-malware-protection-${var.name}"
  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Effect = "Allow"
        Principal = {
          Service = "malware-protection-plan.guardduty.amazonaws.com"
        }
        Action = "sts:AssumeRole"
      }
    ]
  })
}

resource "aws_iam_policy_attachment" "guardduty_malware_protection" {
  name       = "guardduty-malware-protection-${var.name}"
  policy_arn = aws_iam_policy.guardduty_malware_protection.arn
  roles      = [aws_iam_role.guardduty_malware_protection.name]
}

resource "aws_guardduty_malware_protection_plan" "default" {
  role     = aws_iam_role.guardduty_malware_protection.arn

  protected_resource {
    s3_bucket {
      bucket_name = var.bucket
    }
  }

  actions {
    tagging {
      status = "ENABLED"
    }
  }

  tags = {
    "scanned" = "true"
  }
}